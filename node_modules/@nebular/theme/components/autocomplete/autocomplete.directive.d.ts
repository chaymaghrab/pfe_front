/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { AfterViewInit, ChangeDetectorRef, ComponentRef, ElementRef, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NbOverlayRef, NbScrollStrategy } from '../cdk/overlay/mapping';
import { NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../cdk/overlay/overlay-trigger';
import { NbOverlayService } from '../cdk/overlay/overlay-service';
import { Subject } from 'rxjs';
import { NbAdjustableConnectedPositionStrategy, NbPositionBuilderService } from '../cdk/overlay/overlay-position';
import { NbActiveDescendantKeyManager, NbActiveDescendantKeyManagerFactoryService } from '../cdk/a11y/descendant-key-manager';
import { NbAutocompleteComponent } from './autocomplete.component';
import { NbOptionComponent } from '../option/option.component';
/**
 * The `NbAutocompleteDirective` provides a capability to expand input with
 * `NbAutocompleteComponent` overlay containing options to select and fill input with.
 *
 * @stacked-example(Showcase, autocomplete/autocomplete-showcase.component)
 *
 * ### Installation
 *
 * Import `NbAutocompleteModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbAutocompleteModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * You can bind control with form controls or ngModel.
 *
 * @stacked-example(Autocomplete form binding, autocomplete/autocomplete-form.component)
 *
 * Options in the autocomplete may be grouped using `nb-option-group` component.
 *
 * @stacked-example(Grouping, autocomplete/autocomplete-group.component)
 *
 * Autocomplete may change selected option value via provided function.
 *
 * @stacked-example(Custom display, autocomplete/autocomplete-custom-display.component)
 *
 * Also, autocomplete may make first option in option list active automatically.
 *
 * @stacked-example(Active first, autocomplete/autocomplete-active-first.component)
 *
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbAutocompleteDirective<T> implements OnDestroy, AfterViewInit, ControlValueAccessor {
    protected hostRef: ElementRef;
    protected overlay: NbOverlayService;
    protected cd: ChangeDetectorRef;
    protected triggerStrategyBuilder: NbTriggerStrategyBuilderService;
    protected positionBuilder: NbPositionBuilderService;
    protected activeDescendantKeyManagerFactory: NbActiveDescendantKeyManagerFactoryService<NbOptionComponent<T>>;
    /**
     * NbAutocompleteComponent instance passed via input.
     * */
    protected _autocomplete: NbAutocompleteComponent<T>;
    /**
     * Trigger strategy used by overlay.
     * @docs-private
     * */
    protected triggerStrategy: NbTriggerStrategy;
    protected positionStrategy: NbAdjustableConnectedPositionStrategy;
    protected overlayRef: NbOverlayRef;
    protected overlayOffset: number;
    protected keyManager: NbActiveDescendantKeyManager<NbOptionComponent<T>>;
    protected destroy$: Subject<void>;
    protected _onChange: (value: T) => void;
    protected _onTouched: () => void;
    /**
     * Determines is autocomplete overlay opened.
     * */
    get isOpen(): boolean;
    /**
     * Determines is autocomplete overlay closed.
     * */
    get isClosed(): boolean;
    /**
     * Provides autocomplete component.
     * */
    get autocomplete(): NbAutocompleteComponent<T>;
    set autocomplete(autocomplete: NbAutocompleteComponent<T>);
    /**
     * Determines if the input will be focused when the control value is changed
     * */
    get focusInputOnValueChange(): boolean;
    set focusInputOnValueChange(value: boolean);
    protected _focusInputOnValueChange: boolean;
    get top(): boolean;
    get bottom(): boolean;
    role: string;
    ariaAutocomplete: string;
    hasPopup: string;
    get ariaExpanded(): string;
    get ariaOwns(): string;
    get ariaActiveDescendant(): string;
    constructor(hostRef: ElementRef, overlay: NbOverlayService, cd: ChangeDetectorRef, triggerStrategyBuilder: NbTriggerStrategyBuilderService, positionBuilder: NbPositionBuilderService, activeDescendantKeyManagerFactory: NbActiveDescendantKeyManagerFactoryService<NbOptionComponent<T>>);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    handleInput(): void;
    handleKeydown(): void;
    handleBlur(): void;
    show(): void;
    hide(): void;
    writeValue(value: T): void;
    registerOnChange(fn: (value: any) => {}): void;
    registerOnTouched(fn: any): void;
    protected subscribeOnOptionClick(): void;
    protected subscribeOnPositionChange(): void;
    protected getActiveItem(): NbOptionComponent<T>;
    protected setupAutocomplete(): void;
    protected getDisplayValue(value: string): string;
    protected getContainer(): ComponentRef<any>;
    protected handleInputValueUpdate(value: T): void;
    protected subscribeOnTriggers(): void;
    protected createTriggerStrategy(): NbTriggerStrategy;
    protected createKeyManager(): void;
    protected setHostInputValue(value: any): void;
    protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy;
    protected subscribeOnOverlayKeys(): void;
    protected setActiveItem(): void;
    protected attachToOverlay(): void;
    protected createOverlay(): void;
    protected initOverlay(): void;
    protected checkOverlayVisibility(): void;
    protected createScrollStrategy(): NbScrollStrategy;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbAutocompleteDirective<any>>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbAutocompleteDirective<any>, "input[nbAutocomplete]", never, {
    "autocomplete": "nbAutocomplete";
    "focusInputOnValueChange": "focusInputOnValueChange";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJhdXRvY29tcGxldGUuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0RBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0ZBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudFJlZiwgRWxlbWVudFJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE5iT3ZlcmxheVJlZiwgTmJTY3JvbGxTdHJhdGVneSB9IGZyb20gJy4uL2Nkay9vdmVybGF5L21hcHBpbmcnO1xuaW1wb3J0IHsgTmJUcmlnZ2VyU3RyYXRlZ3ksIE5iVHJpZ2dlclN0cmF0ZWd5QnVpbGRlclNlcnZpY2UgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9vdmVybGF5LXRyaWdnZXInO1xuaW1wb3J0IHsgTmJPdmVybGF5U2VydmljZSB9IGZyb20gJy4uL2Nkay9vdmVybGF5L292ZXJsYXktc2VydmljZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkFkanVzdGFibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5LCBOYlBvc2l0aW9uQnVpbGRlclNlcnZpY2UgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9vdmVybGF5LXBvc2l0aW9uJztcbmltcG9ydCB7IE5iQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXIsIE5iQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXJGYWN0b3J5U2VydmljZSB9IGZyb20gJy4uL2Nkay9hMTF5L2Rlc2NlbmRhbnQta2V5LW1hbmFnZXInO1xuaW1wb3J0IHsgTmJBdXRvY29tcGxldGVDb21wb25lbnQgfSBmcm9tICcuL2F1dG9jb21wbGV0ZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmJPcHRpb25Db21wb25lbnQgfSBmcm9tICcuLi9vcHRpb24vb3B0aW9uLmNvbXBvbmVudCc7XG4vKipcbiAqIFRoZSBgTmJBdXRvY29tcGxldGVEaXJlY3RpdmVgIHByb3ZpZGVzIGEgY2FwYWJpbGl0eSB0byBleHBhbmQgaW5wdXQgd2l0aFxuICogYE5iQXV0b2NvbXBsZXRlQ29tcG9uZW50YCBvdmVybGF5IGNvbnRhaW5pbmcgb3B0aW9ucyB0byBzZWxlY3QgYW5kIGZpbGwgaW5wdXQgd2l0aC5cbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKFNob3djYXNlLCBhdXRvY29tcGxldGUvYXV0b2NvbXBsZXRlLXNob3djYXNlLmNvbXBvbmVudClcbiAqXG4gKiAjIyMgSW5zdGFsbGF0aW9uXG4gKlxuICogSW1wb3J0IGBOYkF1dG9jb21wbGV0ZU1vZHVsZWAgdG8geW91ciBmZWF0dXJlIG1vZHVsZS5cbiAqIGBgYHRzXG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgLy8gLi4uXG4gKiAgICAgTmJBdXRvY29tcGxldGVNb2R1bGUsXG4gKiAgIF0sXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIFBhZ2VNb2R1bGUgeyB9XG4gKiBgYGBcbiAqICMjIyBVc2FnZVxuICpcbiAqIFlvdSBjYW4gYmluZCBjb250cm9sIHdpdGggZm9ybSBjb250cm9scyBvciBuZ01vZGVsLlxuICpcbiAqIEBzdGFja2VkLWV4YW1wbGUoQXV0b2NvbXBsZXRlIGZvcm0gYmluZGluZywgYXV0b2NvbXBsZXRlL2F1dG9jb21wbGV0ZS1mb3JtLmNvbXBvbmVudClcbiAqXG4gKiBPcHRpb25zIGluIHRoZSBhdXRvY29tcGxldGUgbWF5IGJlIGdyb3VwZWQgdXNpbmcgYG5iLW9wdGlvbi1ncm91cGAgY29tcG9uZW50LlxuICpcbiAqIEBzdGFja2VkLWV4YW1wbGUoR3JvdXBpbmcsIGF1dG9jb21wbGV0ZS9hdXRvY29tcGxldGUtZ3JvdXAuY29tcG9uZW50KVxuICpcbiAqIEF1dG9jb21wbGV0ZSBtYXkgY2hhbmdlIHNlbGVjdGVkIG9wdGlvbiB2YWx1ZSB2aWEgcHJvdmlkZWQgZnVuY3Rpb24uXG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShDdXN0b20gZGlzcGxheSwgYXV0b2NvbXBsZXRlL2F1dG9jb21wbGV0ZS1jdXN0b20tZGlzcGxheS5jb21wb25lbnQpXG4gKlxuICogQWxzbywgYXV0b2NvbXBsZXRlIG1heSBtYWtlIGZpcnN0IG9wdGlvbiBpbiBvcHRpb24gbGlzdCBhY3RpdmUgYXV0b21hdGljYWxseS5cbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKEFjdGl2ZSBmaXJzdCwgYXV0b2NvbXBsZXRlL2F1dG9jb21wbGV0ZS1hY3RpdmUtZmlyc3QuY29tcG9uZW50KVxuICpcbiAqICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkF1dG9jb21wbGV0ZURpcmVjdGl2ZTxUPiBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIHByb3RlY3RlZCBob3N0UmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBvdmVybGF5OiBOYk92ZXJsYXlTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJvdGVjdGVkIHRyaWdnZXJTdHJhdGVneUJ1aWxkZXI6IE5iVHJpZ2dlclN0cmF0ZWd5QnVpbGRlclNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIHBvc2l0aW9uQnVpbGRlcjogTmJQb3NpdGlvbkJ1aWxkZXJTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBhY3RpdmVEZXNjZW5kYW50S2V5TWFuYWdlckZhY3Rvcnk6IE5iQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXJGYWN0b3J5U2VydmljZTxOYk9wdGlvbkNvbXBvbmVudDxUPj47XG4gICAgLyoqXG4gICAgICogTmJBdXRvY29tcGxldGVDb21wb25lbnQgaW5zdGFuY2UgcGFzc2VkIHZpYSBpbnB1dC5cbiAgICAgKiAqL1xuICAgIHByb3RlY3RlZCBfYXV0b2NvbXBsZXRlOiBOYkF1dG9jb21wbGV0ZUNvbXBvbmVudDxUPjtcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHN0cmF0ZWd5IHVzZWQgYnkgb3ZlcmxheS5cbiAgICAgKiBAZG9jcy1wcml2YXRlXG4gICAgICogKi9cbiAgICBwcm90ZWN0ZWQgdHJpZ2dlclN0cmF0ZWd5OiBOYlRyaWdnZXJTdHJhdGVneTtcbiAgICBwcm90ZWN0ZWQgcG9zaXRpb25TdHJhdGVneTogTmJBZGp1c3RhYmxlQ29ubmVjdGVkUG9zaXRpb25TdHJhdGVneTtcbiAgICBwcm90ZWN0ZWQgb3ZlcmxheVJlZjogTmJPdmVybGF5UmVmO1xuICAgIHByb3RlY3RlZCBvdmVybGF5T2Zmc2V0OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGtleU1hbmFnZXI6IE5iQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXI8TmJPcHRpb25Db21wb25lbnQ8VD4+O1xuICAgIHByb3RlY3RlZCBkZXN0cm95JDogU3ViamVjdDx2b2lkPjtcbiAgICBwcm90ZWN0ZWQgX29uQ2hhbmdlOiAodmFsdWU6IFQpID0+IHZvaWQ7XG4gICAgcHJvdGVjdGVkIF9vblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpcyBhdXRvY29tcGxldGUgb3ZlcmxheSBvcGVuZWQuXG4gICAgICogKi9cbiAgICBnZXQgaXNPcGVuKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpcyBhdXRvY29tcGxldGUgb3ZlcmxheSBjbG9zZWQuXG4gICAgICogKi9cbiAgICBnZXQgaXNDbG9zZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBhdXRvY29tcGxldGUgY29tcG9uZW50LlxuICAgICAqICovXG4gICAgZ2V0IGF1dG9jb21wbGV0ZSgpOiBOYkF1dG9jb21wbGV0ZUNvbXBvbmVudDxUPjtcbiAgICBzZXQgYXV0b2NvbXBsZXRlKGF1dG9jb21wbGV0ZTogTmJBdXRvY29tcGxldGVDb21wb25lbnQ8VD4pO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdGhlIGlucHV0IHdpbGwgYmUgZm9jdXNlZCB3aGVuIHRoZSBjb250cm9sIHZhbHVlIGlzIGNoYW5nZWRcbiAgICAgKiAqL1xuICAgIGdldCBmb2N1c0lucHV0T25WYWx1ZUNoYW5nZSgpOiBib29sZWFuO1xuICAgIHNldCBmb2N1c0lucHV0T25WYWx1ZUNoYW5nZSh2YWx1ZTogYm9vbGVhbik7XG4gICAgcHJvdGVjdGVkIF9mb2N1c0lucHV0T25WYWx1ZUNoYW5nZTogYm9vbGVhbjtcbiAgICBnZXQgdG9wKCk6IGJvb2xlYW47XG4gICAgZ2V0IGJvdHRvbSgpOiBib29sZWFuO1xuICAgIHJvbGU6IHN0cmluZztcbiAgICBhcmlhQXV0b2NvbXBsZXRlOiBzdHJpbmc7XG4gICAgaGFzUG9wdXA6IHN0cmluZztcbiAgICBnZXQgYXJpYUV4cGFuZGVkKCk6IHN0cmluZztcbiAgICBnZXQgYXJpYU93bnMoKTogc3RyaW5nO1xuICAgIGdldCBhcmlhQWN0aXZlRGVzY2VuZGFudCgpOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZjogRWxlbWVudFJlZiwgb3ZlcmxheTogTmJPdmVybGF5U2VydmljZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmLCB0cmlnZ2VyU3RyYXRlZ3lCdWlsZGVyOiBOYlRyaWdnZXJTdHJhdGVneUJ1aWxkZXJTZXJ2aWNlLCBwb3NpdGlvbkJ1aWxkZXI6IE5iUG9zaXRpb25CdWlsZGVyU2VydmljZSwgYWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXJGYWN0b3J5OiBOYkFjdGl2ZURlc2NlbmRhbnRLZXlNYW5hZ2VyRmFjdG9yeVNlcnZpY2U8TmJPcHRpb25Db21wb25lbnQ8VD4+KTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGhhbmRsZUlucHV0KCk6IHZvaWQ7XG4gICAgaGFuZGxlS2V5ZG93bigpOiB2b2lkO1xuICAgIGhhbmRsZUJsdXIoKTogdm9pZDtcbiAgICBzaG93KCk6IHZvaWQ7XG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IFQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB7fSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHN1YnNjcmliZU9uT3B0aW9uQ2xpY2soKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaWJlT25Qb3NpdGlvbkNoYW5nZSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBnZXRBY3RpdmVJdGVtKCk6IE5iT3B0aW9uQ29tcG9uZW50PFQ+O1xuICAgIHByb3RlY3RlZCBzZXR1cEF1dG9jb21wbGV0ZSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBnZXREaXNwbGF5VmFsdWUodmFsdWU6IHN0cmluZyk6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgZ2V0Q29udGFpbmVyKCk6IENvbXBvbmVudFJlZjxhbnk+O1xuICAgIHByb3RlY3RlZCBoYW5kbGVJbnB1dFZhbHVlVXBkYXRlKHZhbHVlOiBUKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaWJlT25UcmlnZ2VycygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjcmVhdGVUcmlnZ2VyU3RyYXRlZ3koKTogTmJUcmlnZ2VyU3RyYXRlZ3k7XG4gICAgcHJvdGVjdGVkIGNyZWF0ZUtleU1hbmFnZXIoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc2V0SG9zdElucHV0VmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNyZWF0ZVBvc2l0aW9uU3RyYXRlZ3koKTogTmJBZGp1c3RhYmxlQ29ubmVjdGVkUG9zaXRpb25TdHJhdGVneTtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaWJlT25PdmVybGF5S2V5cygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzZXRBY3RpdmVJdGVtKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGF0dGFjaFRvT3ZlcmxheSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjcmVhdGVPdmVybGF5KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGluaXRPdmVybGF5KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNoZWNrT3ZlcmxheVZpc2liaWxpdHkoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgY3JlYXRlU2Nyb2xsU3RyYXRlZ3koKTogTmJTY3JvbGxTdHJhdGVneTtcbn1cbiJdfQ==