import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { DateRangePicker } from '@syncfusion/ej2-calendars';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Represents the Essential JS 2 Angular DateRangePicker Component.
 * ```html
 * <ejs-daterangepicker [startDate]='date' [endDate]='date'></ejs-daterangepicker>
 * ```
 */
export declare class DateRangePickerComponent extends DateRangePicker implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    formCompContext: any;
    formContext: any;
    tagObjects: any;
    blur: any;
    change: any;
    cleared: any;
    close: any;
    created: any;
    destroyed: any;
    focus: any;
    navigated: any;
    open: any;
    renderDayCell: any;
    select: any;
    startDateChange: any;
    endDateChange: any;
    valueChange: any;
    childPresets: any;
    tags: string[];
    /**
     * Specifies the initial view of the Calendar when it is opened.
     * With the help of this property, initial view can be changed to year or decade view.
     * @default Month
     */
    start: any;
    end: any;
    private skipFromEvent;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    registerOnChange(registerFunction: (_: any) => void): void;
    registerOnTouched(registerFunction: () => void): void;
    writeValue(value: any): void;
    setDisabledState(disabled: boolean): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DateRangePickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DateRangePickerComponent, "ejs-daterangepicker", never, {
    "allowEdit": "allowEdit";
    "calendarMode": "calendarMode";
    "cssClass": "cssClass";
    "dayHeaderFormat": "dayHeaderFormat";
    "depth": "depth";
    "enablePersistence": "enablePersistence";
    "enableRtl": "enableRtl";
    "enabled": "enabled";
    "endDate": "endDate";
    "firstDayOfWeek": "firstDayOfWeek";
    "floatLabelType": "floatLabelType";
    "format": "format";
    "htmlAttributes": "htmlAttributes";
    "keyConfigs": "keyConfigs";
    "locale": "locale";
    "max": "max";
    "maxDays": "maxDays";
    "min": "min";
    "minDays": "minDays";
    "openOnFocus": "openOnFocus";
    "placeholder": "placeholder";
    "presets": "presets";
    "readonly": "readonly";
    "separator": "separator";
    "serverTimezoneOffset": "serverTimezoneOffset";
    "showClearButton": "showClearButton";
    "start": "start";
    "startDate": "startDate";
    "strictMode": "strictMode";
    "value": "value";
    "weekNumber": "weekNumber";
    "weekRule": "weekRule";
    "width": "width";
    "zIndex": "zIndex";
}, {
    "blur": "blur";
    "change": "change";
    "cleared": "cleared";
    "close": "close";
    "created": "created";
    "destroyed": "destroyed";
    "focus": "focus";
    "navigated": "navigated";
    "open": "open";
    "renderDayCell": "renderDayCell";
    "select": "select";
    "startDateChange": "startDateChange";
    "endDateChange": "endDateChange";
    "valueChange": "valueChange";
}, ["start", "end", "childPresets"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXJhbmdlcGlja2VyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkYXRlcmFuZ2VwaWNrZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvREEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBSZW5kZXJlcjIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ29tcG9uZW50QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuaW1wb3J0IHsgRGF0ZVJhbmdlUGlja2VyIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWNhbGVuZGFycyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpbnB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgb3V0cHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d29XYXlzOiBzdHJpbmdbXTtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgRXNzZW50aWFsIEpTIDIgQW5ndWxhciBEYXRlUmFuZ2VQaWNrZXIgQ29tcG9uZW50LlxuICogYGBgaHRtbFxuICogPGVqcy1kYXRlcmFuZ2VwaWNrZXIgW3N0YXJ0RGF0ZV09J2RhdGUnIFtlbmREYXRlXT0nZGF0ZSc+PC9lanMtZGF0ZXJhbmdlcGlja2VyPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGVSYW5nZVBpY2tlckNvbXBvbmVudCBleHRlbmRzIERhdGVSYW5nZVBpY2tlciBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGZvcm1Db21wQ29udGV4dDogYW55O1xuICAgIGZvcm1Db250ZXh0OiBhbnk7XG4gICAgdGFnT2JqZWN0czogYW55O1xuICAgIGJsdXI6IGFueTtcbiAgICBjaGFuZ2U6IGFueTtcbiAgICBjbGVhcmVkOiBhbnk7XG4gICAgY2xvc2U6IGFueTtcbiAgICBjcmVhdGVkOiBhbnk7XG4gICAgZGVzdHJveWVkOiBhbnk7XG4gICAgZm9jdXM6IGFueTtcbiAgICBuYXZpZ2F0ZWQ6IGFueTtcbiAgICBvcGVuOiBhbnk7XG4gICAgcmVuZGVyRGF5Q2VsbDogYW55O1xuICAgIHNlbGVjdDogYW55O1xuICAgIHN0YXJ0RGF0ZUNoYW5nZTogYW55O1xuICAgIGVuZERhdGVDaGFuZ2U6IGFueTtcbiAgICB2YWx1ZUNoYW5nZTogYW55O1xuICAgIGNoaWxkUHJlc2V0czogYW55O1xuICAgIHRhZ3M6IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgaW5pdGlhbCB2aWV3IG9mIHRoZSBDYWxlbmRhciB3aGVuIGl0IGlzIG9wZW5lZC5cbiAgICAgKiBXaXRoIHRoZSBoZWxwIG9mIHRoaXMgcHJvcGVydHksIGluaXRpYWwgdmlldyBjYW4gYmUgY2hhbmdlZCB0byB5ZWFyIG9yIGRlY2FkZSB2aWV3LlxuICAgICAqIEBkZWZhdWx0IE1vbnRoXG4gICAgICovXG4gICAgc3RhcnQ6IGFueTtcbiAgICBlbmQ6IGFueTtcbiAgICBwcml2YXRlIHNraXBGcm9tRXZlbnQ7XG4gICAgY29uc3RydWN0b3IobmdFbGU6IEVsZW1lbnRSZWYsIHNyZW5kZXJlcjogUmVuZGVyZXIyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UocmVnaXN0ZXJGdW5jdGlvbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQocmVnaXN0ZXJGdW5jdGlvbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGRpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJFdmVudHM6IChldmVudExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICAgIGFkZFR3b1dheTogKHByb3BMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbn1cbiJdfQ==