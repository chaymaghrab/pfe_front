import { AnimationBuilder } from '@angular/animations';
import { AfterViewChecked, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class CollapseDirective implements AfterViewChecked {
    private _el;
    private _renderer;
    /** This event fires as soon as content collapses */
    collapsed: EventEmitter<CollapseDirective>;
    /** This event fires when collapsing is started */
    collapses: EventEmitter<CollapseDirective>;
    /** This event fires as soon as content becomes visible */
    expanded: EventEmitter<CollapseDirective>;
    /** This event fires when expansion is started */
    expands: EventEmitter<CollapseDirective>;
    isExpanded: boolean;
    collapseNewValue: boolean;
    isCollapsed: boolean;
    isCollapse: boolean;
    isCollapsing: boolean;
    set display(value: string);
    /** turn on/off animation */
    isAnimated: boolean;
    /** A flag indicating visibility of content (shown or hidden) */
    set collapse(value: boolean);
    get collapse(): boolean;
    private _display;
    private _factoryCollapseAnimation;
    private _factoryExpandAnimation;
    private _isAnimationDone;
    private _player;
    private _stylesLoaded;
    private _COLLAPSE_ACTION_NAME;
    private _EXPAND_ACTION_NAME;
    constructor(_el: ElementRef, _renderer: Renderer2, _builder: AnimationBuilder);
    ngAfterViewChecked(): void;
    /** allows to manually toggle content visibility */
    toggle(): void;
    /** allows to manually hide content */
    hide(): void;
    /** allows to manually show collapsed content */
    show(): void;
    animationRun(isAnimated: boolean, action: string): (callback: () => void) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CollapseDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CollapseDirective, "[collapse]", ["bs-collapse"], {
    "isAnimated": "isAnimated";
    "display": "display";
    "collapse": "collapse";
}, {
    "collapsed": "collapsed";
    "collapses": "collapses";
    "expanded": "expanded";
    "expands": "expands";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2UuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImNvbGxhcHNlLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmltYXRpb25CdWlsZGVyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBBZnRlclZpZXdDaGVja2VkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ29sbGFwc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkIHtcbiAgICBwcml2YXRlIF9lbDtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICAvKiogVGhpcyBldmVudCBmaXJlcyBhcyBzb29uIGFzIGNvbnRlbnQgY29sbGFwc2VzICovXG4gICAgY29sbGFwc2VkOiBFdmVudEVtaXR0ZXI8Q29sbGFwc2VEaXJlY3RpdmU+O1xuICAgIC8qKiBUaGlzIGV2ZW50IGZpcmVzIHdoZW4gY29sbGFwc2luZyBpcyBzdGFydGVkICovXG4gICAgY29sbGFwc2VzOiBFdmVudEVtaXR0ZXI8Q29sbGFwc2VEaXJlY3RpdmU+O1xuICAgIC8qKiBUaGlzIGV2ZW50IGZpcmVzIGFzIHNvb24gYXMgY29udGVudCBiZWNvbWVzIHZpc2libGUgKi9cbiAgICBleHBhbmRlZDogRXZlbnRFbWl0dGVyPENvbGxhcHNlRGlyZWN0aXZlPjtcbiAgICAvKiogVGhpcyBldmVudCBmaXJlcyB3aGVuIGV4cGFuc2lvbiBpcyBzdGFydGVkICovXG4gICAgZXhwYW5kczogRXZlbnRFbWl0dGVyPENvbGxhcHNlRGlyZWN0aXZlPjtcbiAgICBpc0V4cGFuZGVkOiBib29sZWFuO1xuICAgIGNvbGxhcHNlTmV3VmFsdWU6IGJvb2xlYW47XG4gICAgaXNDb2xsYXBzZWQ6IGJvb2xlYW47XG4gICAgaXNDb2xsYXBzZTogYm9vbGVhbjtcbiAgICBpc0NvbGxhcHNpbmc6IGJvb2xlYW47XG4gICAgc2V0IGRpc3BsYXkodmFsdWU6IHN0cmluZyk7XG4gICAgLyoqIHR1cm4gb24vb2ZmIGFuaW1hdGlvbiAqL1xuICAgIGlzQW5pbWF0ZWQ6IGJvb2xlYW47XG4gICAgLyoqIEEgZmxhZyBpbmRpY2F0aW5nIHZpc2liaWxpdHkgb2YgY29udGVudCAoc2hvd24gb3IgaGlkZGVuKSAqL1xuICAgIHNldCBjb2xsYXBzZSh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGNvbGxhcHNlKCk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfZGlzcGxheTtcbiAgICBwcml2YXRlIF9mYWN0b3J5Q29sbGFwc2VBbmltYXRpb247XG4gICAgcHJpdmF0ZSBfZmFjdG9yeUV4cGFuZEFuaW1hdGlvbjtcbiAgICBwcml2YXRlIF9pc0FuaW1hdGlvbkRvbmU7XG4gICAgcHJpdmF0ZSBfcGxheWVyO1xuICAgIHByaXZhdGUgX3N0eWxlc0xvYWRlZDtcbiAgICBwcml2YXRlIF9DT0xMQVBTRV9BQ1RJT05fTkFNRTtcbiAgICBwcml2YXRlIF9FWFBBTkRfQUNUSU9OX05BTUU7XG4gICAgY29uc3RydWN0b3IoX2VsOiBFbGVtZW50UmVmLCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgX2J1aWxkZXI6IEFuaW1hdGlvbkJ1aWxkZXIpO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIC8qKiBhbGxvd3MgdG8gbWFudWFsbHkgdG9nZ2xlIGNvbnRlbnQgdmlzaWJpbGl0eSAqL1xuICAgIHRvZ2dsZSgpOiB2b2lkO1xuICAgIC8qKiBhbGxvd3MgdG8gbWFudWFsbHkgaGlkZSBjb250ZW50ICovXG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIC8qKiBhbGxvd3MgdG8gbWFudWFsbHkgc2hvdyBjb2xsYXBzZWQgY29udGVudCAqL1xuICAgIHNob3coKTogdm9pZDtcbiAgICBhbmltYXRpb25SdW4oaXNBbmltYXRlZDogYm9vbGVhbiwgYWN0aW9uOiBzdHJpbmcpOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IHZvaWQ7XG59XG4iXX0=