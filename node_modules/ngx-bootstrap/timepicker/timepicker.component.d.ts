import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TimepickerActions } from './reducer/timepicker.actions';
import { TimepickerStore } from './reducer/timepicker.store';
import { TimepickerConfig } from './timepicker.config';
import { TimeChangeSource, TimepickerComponentState, TimepickerControls } from './timepicker.models';
import { Subscription } from 'rxjs';
import { ControlValueAccessorModel } from './models';
import * as ɵngcc0 from '@angular/core';
export declare const TIMEPICKER_CONTROL_VALUE_ACCESSOR: ControlValueAccessorModel;
export declare class TimepickerComponent implements ControlValueAccessor, TimepickerComponentState, TimepickerControls, OnChanges, OnDestroy {
    private _cd;
    private _store;
    private _timepickerActions;
    /** hours change step */
    hourStep: number;
    /** minutes change step */
    minuteStep: number;
    /** seconds change step */
    secondsStep: number;
    /** if true hours and minutes fields will be readonly */
    readonlyInput: boolean;
    /** if true hours and minutes fields will be disabled */
    disabled: boolean;
    /** if true scroll inside hours and minutes inputs will change time */
    mousewheel: boolean;
    /** if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard */
    arrowkeys: boolean;
    /** if true spinner arrows above and below the inputs will be shown */
    showSpinners: boolean;
    /** if true meridian button will be shown */
    showMeridian: boolean;
    /** show minutes in timepicker */
    showMinutes: boolean;
    /** show seconds in timepicker */
    showSeconds: boolean;
    /** meridian labels based on locale */
    meridians: string[];
    /** minimum time user can select */
    min: Date;
    /** maximum time user can select */
    max: Date;
    /** placeholder for hours field in timepicker */
    hoursPlaceholder: string;
    /** placeholder for minutes field in timepicker */
    minutesPlaceholder: string;
    /** placeholder for seconds field in timepicker */
    secondsPlaceholder: string;
    /** emits true if value is a valid date */
    isValid: EventEmitter<boolean>;
    hours: string;
    minutes: string;
    seconds: string;
    meridian: string;
    /** @deprecated - please use `isEditable` instead */
    get isSpinnersVisible(): boolean;
    get isEditable(): boolean;
    invalidHours: boolean;
    invalidMinutes: boolean;
    invalidSeconds: boolean;
    labelHours: string;
    labelMinutes: string;
    labelSeconds: string;
    canIncrementHours: boolean;
    canIncrementMinutes: boolean;
    canIncrementSeconds: boolean;
    canDecrementHours: boolean;
    canDecrementMinutes: boolean;
    canDecrementSeconds: boolean;
    canToggleMeridian: boolean;
    onChange: Function;
    onTouched: Function;
    timepickerSub: Subscription;
    constructor(_config: TimepickerConfig, _cd: ChangeDetectorRef, _store: TimepickerStore, _timepickerActions: TimepickerActions);
    resetValidation(): void;
    isPM(): boolean;
    prevDef($event: Event): void;
    wheelSign($event: WheelEventInit): number;
    ngOnChanges(changes: SimpleChanges): void;
    changeHours(step: number, source?: TimeChangeSource): void;
    changeMinutes(step: number, source?: TimeChangeSource): void;
    changeSeconds(step: number, source?: TimeChangeSource): void;
    updateHours(hours: string): void;
    updateMinutes(minutes: string): void;
    updateSeconds(seconds: string): void;
    isValidLimit(): boolean;
    _updateTime(): void;
    toggleMeridian(): void;
    /**
     * Write a new value to the element.
     */
    writeValue(obj: string | null | undefined | Date): void;
    /**
     * Set the function to be called when the control receives a change event.
     */
    registerOnChange(fn: (_: any) => {}): void;
    /**
     * Set the function to be called when the control receives a touch event.
     */
    registerOnTouched(fn: () => {}): void;
    /**
     * This function is called when the control status changes to or from "disabled".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     *
     * @param isDisabled
     */
    setDisabledState(isDisabled: boolean): void;
    ngOnDestroy(): void;
    private _renderTime;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimepickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TimepickerComponent, "timepicker", never, {
    "disabled": "disabled";
    "hourStep": "hourStep";
    "minuteStep": "minuteStep";
    "secondsStep": "secondsStep";
    "readonlyInput": "readonlyInput";
    "mousewheel": "mousewheel";
    "arrowkeys": "arrowkeys";
    "showSpinners": "showSpinners";
    "showMeridian": "showMeridian";
    "showMinutes": "showMinutes";
    "showSeconds": "showSeconds";
    "meridians": "meridians";
    "min": "min";
    "max": "max";
    "hoursPlaceholder": "hoursPlaceholder";
    "minutesPlaceholder": "minutesPlaceholder";
    "secondsPlaceholder": "secondsPlaceholder";
}, {
    "isValid": "isValid";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGltZXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0dBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVGltZXBpY2tlckFjdGlvbnMgfSBmcm9tICcuL3JlZHVjZXIvdGltZXBpY2tlci5hY3Rpb25zJztcbmltcG9ydCB7IFRpbWVwaWNrZXJTdG9yZSB9IGZyb20gJy4vcmVkdWNlci90aW1lcGlja2VyLnN0b3JlJztcbmltcG9ydCB7IFRpbWVwaWNrZXJDb25maWcgfSBmcm9tICcuL3RpbWVwaWNrZXIuY29uZmlnJztcbmltcG9ydCB7IFRpbWVDaGFuZ2VTb3VyY2UsIFRpbWVwaWNrZXJDb21wb25lbnRTdGF0ZSwgVGltZXBpY2tlckNvbnRyb2xzIH0gZnJvbSAnLi90aW1lcGlja2VyLm1vZGVscyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yTW9kZWwgfSBmcm9tICcuL21vZGVscyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBUSU1FUElDS0VSX0NPTlRST0xfVkFMVUVfQUNDRVNTT1I6IENvbnRyb2xWYWx1ZUFjY2Vzc29yTW9kZWw7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUaW1lcGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFRpbWVwaWNrZXJDb21wb25lbnRTdGF0ZSwgVGltZXBpY2tlckNvbnRyb2xzLCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfY2Q7XG4gICAgcHJpdmF0ZSBfc3RvcmU7XG4gICAgcHJpdmF0ZSBfdGltZXBpY2tlckFjdGlvbnM7XG4gICAgLyoqIGhvdXJzIGNoYW5nZSBzdGVwICovXG4gICAgaG91clN0ZXA6IG51bWJlcjtcbiAgICAvKiogbWludXRlcyBjaGFuZ2Ugc3RlcCAqL1xuICAgIG1pbnV0ZVN0ZXA6IG51bWJlcjtcbiAgICAvKiogc2Vjb25kcyBjaGFuZ2Ugc3RlcCAqL1xuICAgIHNlY29uZHNTdGVwOiBudW1iZXI7XG4gICAgLyoqIGlmIHRydWUgaG91cnMgYW5kIG1pbnV0ZXMgZmllbGRzIHdpbGwgYmUgcmVhZG9ubHkgKi9cbiAgICByZWFkb25seUlucHV0OiBib29sZWFuO1xuICAgIC8qKiBpZiB0cnVlIGhvdXJzIGFuZCBtaW51dGVzIGZpZWxkcyB3aWxsIGJlIGRpc2FibGVkICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqIGlmIHRydWUgc2Nyb2xsIGluc2lkZSBob3VycyBhbmQgbWludXRlcyBpbnB1dHMgd2lsbCBjaGFuZ2UgdGltZSAqL1xuICAgIG1vdXNld2hlZWw6IGJvb2xlYW47XG4gICAgLyoqIGlmIHRydWUgdGhlIHZhbHVlcyBvZiBob3VycyBhbmQgbWludXRlcyBjYW4gYmUgY2hhbmdlZCB1c2luZyB0aGUgdXAvZG93biBhcnJvdyBrZXlzIG9uIHRoZSBrZXlib2FyZCAqL1xuICAgIGFycm93a2V5czogYm9vbGVhbjtcbiAgICAvKiogaWYgdHJ1ZSBzcGlubmVyIGFycm93cyBhYm92ZSBhbmQgYmVsb3cgdGhlIGlucHV0cyB3aWxsIGJlIHNob3duICovXG4gICAgc2hvd1NwaW5uZXJzOiBib29sZWFuO1xuICAgIC8qKiBpZiB0cnVlIG1lcmlkaWFuIGJ1dHRvbiB3aWxsIGJlIHNob3duICovXG4gICAgc2hvd01lcmlkaWFuOiBib29sZWFuO1xuICAgIC8qKiBzaG93IG1pbnV0ZXMgaW4gdGltZXBpY2tlciAqL1xuICAgIHNob3dNaW51dGVzOiBib29sZWFuO1xuICAgIC8qKiBzaG93IHNlY29uZHMgaW4gdGltZXBpY2tlciAqL1xuICAgIHNob3dTZWNvbmRzOiBib29sZWFuO1xuICAgIC8qKiBtZXJpZGlhbiBsYWJlbHMgYmFzZWQgb24gbG9jYWxlICovXG4gICAgbWVyaWRpYW5zOiBzdHJpbmdbXTtcbiAgICAvKiogbWluaW11bSB0aW1lIHVzZXIgY2FuIHNlbGVjdCAqL1xuICAgIG1pbjogRGF0ZTtcbiAgICAvKiogbWF4aW11bSB0aW1lIHVzZXIgY2FuIHNlbGVjdCAqL1xuICAgIG1heDogRGF0ZTtcbiAgICAvKiogcGxhY2Vob2xkZXIgZm9yIGhvdXJzIGZpZWxkIGluIHRpbWVwaWNrZXIgKi9cbiAgICBob3Vyc1BsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgLyoqIHBsYWNlaG9sZGVyIGZvciBtaW51dGVzIGZpZWxkIGluIHRpbWVwaWNrZXIgKi9cbiAgICBtaW51dGVzUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICAvKiogcGxhY2Vob2xkZXIgZm9yIHNlY29uZHMgZmllbGQgaW4gdGltZXBpY2tlciAqL1xuICAgIHNlY29uZHNQbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIC8qKiBlbWl0cyB0cnVlIGlmIHZhbHVlIGlzIGEgdmFsaWQgZGF0ZSAqL1xuICAgIGlzVmFsaWQ6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBob3Vyczogc3RyaW5nO1xuICAgIG1pbnV0ZXM6IHN0cmluZztcbiAgICBzZWNvbmRzOiBzdHJpbmc7XG4gICAgbWVyaWRpYW46IHN0cmluZztcbiAgICAvKiogQGRlcHJlY2F0ZWQgLSBwbGVhc2UgdXNlIGBpc0VkaXRhYmxlYCBpbnN0ZWFkICovXG4gICAgZ2V0IGlzU3Bpbm5lcnNWaXNpYmxlKCk6IGJvb2xlYW47XG4gICAgZ2V0IGlzRWRpdGFibGUoKTogYm9vbGVhbjtcbiAgICBpbnZhbGlkSG91cnM6IGJvb2xlYW47XG4gICAgaW52YWxpZE1pbnV0ZXM6IGJvb2xlYW47XG4gICAgaW52YWxpZFNlY29uZHM6IGJvb2xlYW47XG4gICAgbGFiZWxIb3Vyczogc3RyaW5nO1xuICAgIGxhYmVsTWludXRlczogc3RyaW5nO1xuICAgIGxhYmVsU2Vjb25kczogc3RyaW5nO1xuICAgIGNhbkluY3JlbWVudEhvdXJzOiBib29sZWFuO1xuICAgIGNhbkluY3JlbWVudE1pbnV0ZXM6IGJvb2xlYW47XG4gICAgY2FuSW5jcmVtZW50U2Vjb25kczogYm9vbGVhbjtcbiAgICBjYW5EZWNyZW1lbnRIb3VyczogYm9vbGVhbjtcbiAgICBjYW5EZWNyZW1lbnRNaW51dGVzOiBib29sZWFuO1xuICAgIGNhbkRlY3JlbWVudFNlY29uZHM6IGJvb2xlYW47XG4gICAgY2FuVG9nZ2xlTWVyaWRpYW46IGJvb2xlYW47XG4gICAgb25DaGFuZ2U6IEZ1bmN0aW9uO1xuICAgIG9uVG91Y2hlZDogRnVuY3Rpb247XG4gICAgdGltZXBpY2tlclN1YjogU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKF9jb25maWc6IFRpbWVwaWNrZXJDb25maWcsIF9jZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIF9zdG9yZTogVGltZXBpY2tlclN0b3JlLCBfdGltZXBpY2tlckFjdGlvbnM6IFRpbWVwaWNrZXJBY3Rpb25zKTtcbiAgICByZXNldFZhbGlkYXRpb24oKTogdm9pZDtcbiAgICBpc1BNKCk6IGJvb2xlYW47XG4gICAgcHJldkRlZigkZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICB3aGVlbFNpZ24oJGV2ZW50OiBXaGVlbEV2ZW50SW5pdCk6IG51bWJlcjtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBjaGFuZ2VIb3VycyhzdGVwOiBudW1iZXIsIHNvdXJjZT86IFRpbWVDaGFuZ2VTb3VyY2UpOiB2b2lkO1xuICAgIGNoYW5nZU1pbnV0ZXMoc3RlcDogbnVtYmVyLCBzb3VyY2U/OiBUaW1lQ2hhbmdlU291cmNlKTogdm9pZDtcbiAgICBjaGFuZ2VTZWNvbmRzKHN0ZXA6IG51bWJlciwgc291cmNlPzogVGltZUNoYW5nZVNvdXJjZSk6IHZvaWQ7XG4gICAgdXBkYXRlSG91cnMoaG91cnM6IHN0cmluZyk6IHZvaWQ7XG4gICAgdXBkYXRlTWludXRlcyhtaW51dGVzOiBzdHJpbmcpOiB2b2lkO1xuICAgIHVwZGF0ZVNlY29uZHMoc2Vjb25kczogc3RyaW5nKTogdm9pZDtcbiAgICBpc1ZhbGlkTGltaXQoKTogYm9vbGVhbjtcbiAgICBfdXBkYXRlVGltZSgpOiB2b2lkO1xuICAgIHRvZ2dsZU1lcmlkaWFuKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBuZXcgdmFsdWUgdG8gdGhlIGVsZW1lbnQuXG4gICAgICovXG4gICAgd3JpdGVWYWx1ZShvYmo6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQgfCBEYXRlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBjb250cm9sIHJlY2VpdmVzIGEgY2hhbmdlIGV2ZW50LlxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHt9KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBjb250cm9sIHJlY2VpdmVzIGEgdG91Y2ggZXZlbnQuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIHRoZSBjb250cm9sIHN0YXR1cyBjaGFuZ2VzIHRvIG9yIGZyb20gXCJkaXNhYmxlZFwiLlxuICAgICAqIERlcGVuZGluZyBvbiB0aGUgdmFsdWUsIGl0IHdpbGwgZW5hYmxlIG9yIGRpc2FibGUgdGhlIGFwcHJvcHJpYXRlIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGlzRGlzYWJsZWRcbiAgICAgKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfcmVuZGVyVGltZTtcbn1cbiJdfQ==