import { ChangeDetectorRef, ElementRef, OnDestroy, Renderer2, TemplateRef, EventEmitter } from '@angular/core';
import { PositioningService } from 'ngx-bootstrap/positioning';
import { Subscription } from 'rxjs';
import { TypeaheadMatch } from './typeahead-match.class';
import { TypeaheadDirective } from './typeahead.directive';
import { TypeaheadOptionItemContext, TypeaheadOptionListContext, TypeaheadTemplateMethods } from './models';
import * as ɵngcc0 from '@angular/core';
export declare class TypeaheadContainerComponent implements OnDestroy {
    private positionService;
    private renderer;
    element: ElementRef;
    private changeDetectorRef;
    activeChangeEvent: EventEmitter<any>;
    parent: TypeaheadDirective;
    query: string[] | string;
    isFocused: boolean;
    top: string;
    left: string;
    display: string;
    placement: string;
    dropup: boolean;
    guiHeight: string;
    needScrollbar: boolean;
    animationState: string;
    positionServiceSubscription: Subscription;
    height: number;
    popupId: string;
    get isBs4(): boolean;
    get typeaheadTemplateMethods(): TypeaheadTemplateMethods;
    protected _active: TypeaheadMatch;
    protected _matches: TypeaheadMatch[];
    private ulElement;
    private liElements;
    constructor(positionService: PositioningService, renderer: Renderer2, element: ElementRef, changeDetectorRef: ChangeDetectorRef);
    get active(): TypeaheadMatch;
    set active(active: TypeaheadMatch);
    get matches(): TypeaheadMatch[];
    set matches(value: TypeaheadMatch[]);
    get isTopPosition(): boolean;
    get optionsListTemplate(): TemplateRef<TypeaheadOptionListContext>;
    get isAnimated(): boolean;
    get adaptivePosition(): boolean;
    get typeaheadScrollable(): boolean;
    get typeaheadOptionsInScrollableView(): number;
    get typeaheadIsFirstItemActive(): boolean;
    get itemTemplate(): TemplateRef<TypeaheadOptionItemContext>;
    selectActiveMatch(isActiveItemChanged?: boolean): void;
    activeChanged(): void;
    prevActiveMatch(): void;
    nextActiveMatch(): void;
    selectActive(value: TypeaheadMatch): void;
    highlight(match: TypeaheadMatch, query: string[] | string): string;
    focusLost(): void;
    isActive(value: TypeaheadMatch): boolean;
    selectMatch(value: TypeaheadMatch, e?: Event): boolean;
    setScrollableMode(): void;
    scrollPrevious(index: number): void;
    scrollNext(index: number): void;
    ngOnDestroy(): void;
    private isScrolledIntoView;
    private scrollToBottom;
    private scrollToTop;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TypeaheadContainerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TypeaheadContainerComponent, "typeahead-container", never, {}, {
    "activeChangeEvent": "activeChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWFoZWFkLWNvbnRhaW5lci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidHlwZWFoZWFkLWNvbnRhaW5lci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU1BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiwgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9zaXRpb25pbmdTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9wb3NpdGlvbmluZyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFR5cGVhaGVhZE1hdGNoIH0gZnJvbSAnLi90eXBlYWhlYWQtbWF0Y2guY2xhc3MnO1xuaW1wb3J0IHsgVHlwZWFoZWFkRGlyZWN0aXZlIH0gZnJvbSAnLi90eXBlYWhlYWQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFR5cGVhaGVhZE9wdGlvbkl0ZW1Db250ZXh0LCBUeXBlYWhlYWRPcHRpb25MaXN0Q29udGV4dCwgVHlwZWFoZWFkVGVtcGxhdGVNZXRob2RzIH0gZnJvbSAnLi9tb2RlbHMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVHlwZWFoZWFkQ29udGFpbmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHBvc2l0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBhY3RpdmVDaGFuZ2VFdmVudDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcGFyZW50OiBUeXBlYWhlYWREaXJlY3RpdmU7XG4gICAgcXVlcnk6IHN0cmluZ1tdIHwgc3RyaW5nO1xuICAgIGlzRm9jdXNlZDogYm9vbGVhbjtcbiAgICB0b3A6IHN0cmluZztcbiAgICBsZWZ0OiBzdHJpbmc7XG4gICAgZGlzcGxheTogc3RyaW5nO1xuICAgIHBsYWNlbWVudDogc3RyaW5nO1xuICAgIGRyb3B1cDogYm9vbGVhbjtcbiAgICBndWlIZWlnaHQ6IHN0cmluZztcbiAgICBuZWVkU2Nyb2xsYmFyOiBib29sZWFuO1xuICAgIGFuaW1hdGlvblN0YXRlOiBzdHJpbmc7XG4gICAgcG9zaXRpb25TZXJ2aWNlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgcG9wdXBJZDogc3RyaW5nO1xuICAgIGdldCBpc0JzNCgpOiBib29sZWFuO1xuICAgIGdldCB0eXBlYWhlYWRUZW1wbGF0ZU1ldGhvZHMoKTogVHlwZWFoZWFkVGVtcGxhdGVNZXRob2RzO1xuICAgIHByb3RlY3RlZCBfYWN0aXZlOiBUeXBlYWhlYWRNYXRjaDtcbiAgICBwcm90ZWN0ZWQgX21hdGNoZXM6IFR5cGVhaGVhZE1hdGNoW107XG4gICAgcHJpdmF0ZSB1bEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBsaUVsZW1lbnRzO1xuICAgIGNvbnN0cnVjdG9yKHBvc2l0aW9uU2VydmljZTogUG9zaXRpb25pbmdTZXJ2aWNlLCByZW5kZXJlcjogUmVuZGVyZXIyLCBlbGVtZW50OiBFbGVtZW50UmVmLCBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIGdldCBhY3RpdmUoKTogVHlwZWFoZWFkTWF0Y2g7XG4gICAgc2V0IGFjdGl2ZShhY3RpdmU6IFR5cGVhaGVhZE1hdGNoKTtcbiAgICBnZXQgbWF0Y2hlcygpOiBUeXBlYWhlYWRNYXRjaFtdO1xuICAgIHNldCBtYXRjaGVzKHZhbHVlOiBUeXBlYWhlYWRNYXRjaFtdKTtcbiAgICBnZXQgaXNUb3BQb3NpdGlvbigpOiBib29sZWFuO1xuICAgIGdldCBvcHRpb25zTGlzdFRlbXBsYXRlKCk6IFRlbXBsYXRlUmVmPFR5cGVhaGVhZE9wdGlvbkxpc3RDb250ZXh0PjtcbiAgICBnZXQgaXNBbmltYXRlZCgpOiBib29sZWFuO1xuICAgIGdldCBhZGFwdGl2ZVBvc2l0aW9uKCk6IGJvb2xlYW47XG4gICAgZ2V0IHR5cGVhaGVhZFNjcm9sbGFibGUoKTogYm9vbGVhbjtcbiAgICBnZXQgdHlwZWFoZWFkT3B0aW9uc0luU2Nyb2xsYWJsZVZpZXcoKTogbnVtYmVyO1xuICAgIGdldCB0eXBlYWhlYWRJc0ZpcnN0SXRlbUFjdGl2ZSgpOiBib29sZWFuO1xuICAgIGdldCBpdGVtVGVtcGxhdGUoKTogVGVtcGxhdGVSZWY8VHlwZWFoZWFkT3B0aW9uSXRlbUNvbnRleHQ+O1xuICAgIHNlbGVjdEFjdGl2ZU1hdGNoKGlzQWN0aXZlSXRlbUNoYW5nZWQ/OiBib29sZWFuKTogdm9pZDtcbiAgICBhY3RpdmVDaGFuZ2VkKCk6IHZvaWQ7XG4gICAgcHJldkFjdGl2ZU1hdGNoKCk6IHZvaWQ7XG4gICAgbmV4dEFjdGl2ZU1hdGNoKCk6IHZvaWQ7XG4gICAgc2VsZWN0QWN0aXZlKHZhbHVlOiBUeXBlYWhlYWRNYXRjaCk6IHZvaWQ7XG4gICAgaGlnaGxpZ2h0KG1hdGNoOiBUeXBlYWhlYWRNYXRjaCwgcXVlcnk6IHN0cmluZ1tdIHwgc3RyaW5nKTogc3RyaW5nO1xuICAgIGZvY3VzTG9zdCgpOiB2b2lkO1xuICAgIGlzQWN0aXZlKHZhbHVlOiBUeXBlYWhlYWRNYXRjaCk6IGJvb2xlYW47XG4gICAgc2VsZWN0TWF0Y2godmFsdWU6IFR5cGVhaGVhZE1hdGNoLCBlPzogRXZlbnQpOiBib29sZWFuO1xuICAgIHNldFNjcm9sbGFibGVNb2RlKCk6IHZvaWQ7XG4gICAgc2Nyb2xsUHJldmlvdXMoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgc2Nyb2xsTmV4dChpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgaXNTY3JvbGxlZEludG9WaWV3O1xuICAgIHByaXZhdGUgc2Nyb2xsVG9Cb3R0b207XG4gICAgcHJpdmF0ZSBzY3JvbGxUb1RvcDtcbn1cbiJdfQ==