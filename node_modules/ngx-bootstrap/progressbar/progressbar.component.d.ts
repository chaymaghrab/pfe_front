import { ProgressbarConfig } from './progressbar.config';
import { ProgressbarType } from './progressbar-type.interface';
import { BarComponent } from './bar.component';
import * as ɵngcc0 from '@angular/core';
export declare class ProgressbarComponent {
    /** if `true` changing value of progress bar will be animated */
    set animate(value: boolean);
    /** If `true`, striped classes are applied */
    set striped(value: boolean);
    /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */
    type: ProgressbarType;
    /** current value of progress bar. Could be a number or array of objects
     * like {"value":15,"type":"info","label":"15 %"}
     */
    set value(value: number | any[]);
    isStacked: boolean;
    _striped: boolean;
    _animate: boolean;
    _max: number;
    _value: number | any[];
    get isBs3(): boolean;
    /** maximum total value of progress element */
    get max(): number;
    set max(v: number);
    addClass: boolean;
    bars: BarComponent[];
    constructor(config: ProgressbarConfig);
    addBar(bar: BarComponent): void;
    removeBar(bar: BarComponent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProgressbarComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ProgressbarComponent, "progressbar", never, {
    "animate": "animate";
    "striped": "striped";
    "value": "value";
    "max": "max";
    "type": "type";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInByb2dyZXNzYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb2dyZXNzYmFyQ29uZmlnIH0gZnJvbSAnLi9wcm9ncmVzc2Jhci5jb25maWcnO1xuaW1wb3J0IHsgUHJvZ3Jlc3NiYXJUeXBlIH0gZnJvbSAnLi9wcm9ncmVzc2Jhci10eXBlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBCYXJDb21wb25lbnQgfSBmcm9tICcuL2Jhci5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUHJvZ3Jlc3NiYXJDb21wb25lbnQge1xuICAgIC8qKiBpZiBgdHJ1ZWAgY2hhbmdpbmcgdmFsdWUgb2YgcHJvZ3Jlc3MgYmFyIHdpbGwgYmUgYW5pbWF0ZWQgKi9cbiAgICBzZXQgYW5pbWF0ZSh2YWx1ZTogYm9vbGVhbik7XG4gICAgLyoqIElmIGB0cnVlYCwgc3RyaXBlZCBjbGFzc2VzIGFyZSBhcHBsaWVkICovXG4gICAgc2V0IHN0cmlwZWQodmFsdWU6IGJvb2xlYW4pO1xuICAgIC8qKiBwcm92aWRlIG9uZSBvZiB0aGUgZm91ciBzdXBwb3J0ZWQgY29udGV4dHVhbCBjbGFzc2VzOiBgc3VjY2Vzc2AsIGBpbmZvYCwgYHdhcm5pbmdgLCBgZGFuZ2VyYCAqL1xuICAgIHR5cGU6IFByb2dyZXNzYmFyVHlwZTtcbiAgICAvKiogY3VycmVudCB2YWx1ZSBvZiBwcm9ncmVzcyBiYXIuIENvdWxkIGJlIGEgbnVtYmVyIG9yIGFycmF5IG9mIG9iamVjdHNcbiAgICAgKiBsaWtlIHtcInZhbHVlXCI6MTUsXCJ0eXBlXCI6XCJpbmZvXCIsXCJsYWJlbFwiOlwiMTUgJVwifVxuICAgICAqL1xuICAgIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyIHwgYW55W10pO1xuICAgIGlzU3RhY2tlZDogYm9vbGVhbjtcbiAgICBfc3RyaXBlZDogYm9vbGVhbjtcbiAgICBfYW5pbWF0ZTogYm9vbGVhbjtcbiAgICBfbWF4OiBudW1iZXI7XG4gICAgX3ZhbHVlOiBudW1iZXIgfCBhbnlbXTtcbiAgICBnZXQgaXNCczMoKTogYm9vbGVhbjtcbiAgICAvKiogbWF4aW11bSB0b3RhbCB2YWx1ZSBvZiBwcm9ncmVzcyBlbGVtZW50ICovXG4gICAgZ2V0IG1heCgpOiBudW1iZXI7XG4gICAgc2V0IG1heCh2OiBudW1iZXIpO1xuICAgIGFkZENsYXNzOiBib29sZWFuO1xuICAgIGJhcnM6IEJhckNvbXBvbmVudFtdO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogUHJvZ3Jlc3NiYXJDb25maWcpO1xuICAgIGFkZEJhcihiYXI6IEJhckNvbXBvbmVudCk6IHZvaWQ7XG4gICAgcmVtb3ZlQmFyKGJhcjogQmFyQ29tcG9uZW50KTogdm9pZDtcbn1cbiJdfQ==